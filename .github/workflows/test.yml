name: test

on:
  push:
    branches:
      - "*"
  pull_request:
  workflow_dispatch:

jobs:

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-10.15]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install go
        uses: actions/setup-go@v2
        with:
          stable: true

      - name: Install winfsp and winfsp-tests (Windows)
        if: runner.os == 'Windows'
        run: |
          $releases = Invoke-WebRequest https://api.github.com/repos/billziss-gh/winfsp/releases | `
              ConvertFrom-Json

          $asseturi = $releases[0].assets.browser_download_url | `
              Where-Object { $_ -match "winfsp-.*\.msi" }
          Invoke-WebRequest -Uri $asseturi -Out winfsp.msi
          Start-Process -NoNewWindow -Wait msiexec "/i winfsp.msi /qn"

          $asseturi = $releases[0].assets.browser_download_url | `
              Where-Object { $_ -match "winfsp-tests-.*\.zip" }
          Invoke-WebRequest -Uri $asseturi -Out winfsp-tests.zip
          Expand-Archive -Path winfsp-tests.zip
          Copy-Item "C:\Program Files (x86)\WinFsp\bin\winfsp-x64.dll" winfsp-tests

      - name: Install FUSE and secfs.test (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -qq install libfuse-dev
          sudo apt-get -qq install libacl1-dev

          git clone -q https://github.com/billziss-gh/secfs.test.git secfs.test
          git -C secfs.test checkout -q edf5eb4a108bfb41073f765aef0cdd32bb3ee1ed
          mkdir -p secfs.test/tools/bin
          touch secfs.test/tools/bin/bonnie++
          touch secfs.test/tools/bin/iozone
          make -C secfs.test

          # configure fstest for cgofuse
          sed -e 's/^fs=.*$/fs="cgofuse"/' -i""  secfs.test/fstest/fstest/tests/conf

          # remove irrelevant tests
          rm -rf secfs.test/fstest/fstest/tests/xacl
          rm -rf secfs.test/fstest/fstest/tests/zzz_ResourceFork

      - name: Install FUSE and secfs.test (macOS)
        if: runner.os == 'macOS'
        run: |
          # requires macos-10.15; does not work on macos-latest
          # see https://github.com/actions/virtual-environments/issues/4731
          brew install macfuse

          git clone -q https://github.com/billziss-gh/secfs.test.git secfs.test
          git -C secfs.test checkout -q edf5eb4a108bfb41073f765aef0cdd32bb3ee1ed
          mkdir -p secfs.test/tools/bin
          touch secfs.test/tools/bin/bonnie++
          touch secfs.test/tools/bin/iozone
          make -C secfs.test

          # configure fstest for cgofuse
          sed -e 's/^fs=.*$/fs="cgofuse"/' -i ""  secfs.test/fstest/fstest/tests/conf

          # monkey patch some tests for macOS
          sed -e 's/expect EINVAL \(.*\.\.\)$/expect ENOTEMPTY \1/' -i ""  secfs.test/fstest/fstest/tests/rmdir/12.t
          sed -e 's/lchmod)/lchmod) return 1/' -i "" secfs.test/fstest/fstest/tests/misc.sh

          # remove irrelevant tests
          rm -rf secfs.test/fstest/fstest/tests/xacl
          rm -rf secfs.test/fstest/fstest/tests/zzz_ResourceFork

          # remove tests that fail on macOS with ENAMETOOLONG: these tests send a path
          # with a length close to 1024; when ptfs/unionfs prefixes them with the backing
          # directory the total path is over 1024 and macOS errors with ENAMETOOLONG
          rm secfs.test/fstest/fstest/tests/chflags/03.t
          rm secfs.test/fstest/fstest/tests/chmod/03.t
          rm secfs.test/fstest/fstest/tests/chown/03.t
          rm secfs.test/fstest/fstest/tests/link/03.t
          rm secfs.test/fstest/fstest/tests/mkdir/03.t
          rm secfs.test/fstest/fstest/tests/mkfifo/03.t
          rm secfs.test/fstest/fstest/tests/open/03.t
          rm secfs.test/fstest/fstest/tests/rename/02.t
          rm secfs.test/fstest/fstest/tests/rmdir/03.t
          rm secfs.test/fstest/fstest/tests/symlink/03.t
          rm secfs.test/fstest/fstest/tests/truncate/03.t
          rm secfs.test/fstest/fstest/tests/unlink/03.t

      - name: Build HUBFS (Windows)
        if: runner.os == 'Windows'
        run: |
          .\make.cmd dist

      - name: Build HUBFS (Linux / macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          make dist

      - name: Test HUBFS packages (Windows)
        if: runner.os == 'Windows'
        env:
          HUBFS_TOKEN: ${{ secrets.HUBFS_TOKEN }}
        run: |
          Set-Location src
          $env:CGO_ENABLED=0
          go test -count=1 ./...

      - name: Test HUBFS packages (Linux / macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        env:
          HUBFS_TOKEN: ${{ secrets.HUBFS_TOKEN }}
        run: |
          cd src
          go test -count=1 ./...

      - name: Test component file systems (Windows)
        if: runner.os == 'Windows'
        run: |
          Set-PSDebug -Trace 1

          $testexe = (Get-Item winfsp-tests\winfsp-tests-x64.exe)
          Set-Location src
          New-Item -Type Directory -Path hi,lo >$null
          $env:CGO_ENABLED=0

          go build _tools/ptfs.go
          go build _tools/unionfs.go

          Start-Process -NoNewWindow .\ptfs.exe "-o uid=-1,rellinks,FileInfoTimeout=-1 lo X:"
          Start-Sleep 3
          Push-Location X:\
          . $testexe --fuse-external --resilient --case-insensitive-cmp `
              +* `
              -create_fileattr_test `
              -delete_access_test `
              -delete_ex_test `
              -create_backup_test `
              -create_restore_test `
              -rename_flipflop_test `
              -exec_rename_dir_test `
              -reparse_nfs_test `
              -ea*
          Stop-Process -Name ptfs
          Start-Sleep 3
          Pop-Location

          Start-Process -NoNewWindow .\unionfs.exe "-o uid=-1,rellinks,FileInfoTimeout=-1 hi lo X:"
          Start-Sleep 3
          Push-Location X:\
          . $testexe --fuse-external --resilient --case-insensitive-cmp `
              +* `
              -create_fileattr_test `
              -delete_access_test `
              -delete_ex_test `
              -create_backup_test `
              -create_restore_test `
              -rename_flipflop_test `
              -exec_rename_dir_test `
              -reparse_nfs_test `
              -ea*
          Stop-Process -Name unionfs
          Start-Sleep 3
          Pop-Location

      - name: Test component file systems (Linux / macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          set -x

          cd src
          mkdir hi lo mnt

          go build _tools/ptfs.go
          go build _tools/unionfs.go

          sudo ./ptfs -o allow_other,default_permissions,use_ino,attr_timeout=0 lo mnt &
          sleep 3
          (cd mnt && sudo prove -fr ../../secfs.test/fstest/fstest/tests)
          sudo umount mnt

          sudo ./unionfs -o allow_other,default_permissions,use_ino,attr_timeout=0 hi lo mnt &
          sleep 3
          (cd mnt && sudo prove -fr ../../secfs.test/fstest/fstest/tests)
          (cd mnt && ../../secfs.test/tools/bin/fsx -N 50000 test xxxxxx)
          seed=$(date +%s)
          ../secfs.test/tools/bin/fsstress -d mnt -s $seed -n 5000 -p 10 -S
          ../secfs.test/tools/bin/fsstress -d mnt -s $seed -n 5000 -p 10 -S
          sudo umount mnt

          rm -rf hi lo
          rmdir mnt

      - name: Test HUBFS file system (Windows)
        if: runner.os == 'Windows'
        env:
          HUBFS_TOKEN: ${{ secrets.HUBFS_TOKEN }}
        run: |
          Set-PSDebug -Trace 1

          Start-Process -NoNewWindow .\hubfs.exe "-auth token=$env:HUBFS_TOKEN github.com/billziss-gh/hubfs/master X:"
          Start-Sleep 3
          Push-Location X:\
          .\make.cmd dist
          Stop-Process -Name hubfs
          Start-Sleep 3
          Pop-Location

      - name: Test HUBFS file system (Linux / macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        env:
          HUBFS_TOKEN: ${{ secrets.HUBFS_TOKEN }}
        run: |
          set -x

          mkdir mnt

          ./hubfs -auth token=$HUBFS_TOKEN github.com/billziss-gh/hubfs/master mnt &
          sleep 3
          (cd mnt && make dist)
          sudo umount mnt

          rmdir mnt
